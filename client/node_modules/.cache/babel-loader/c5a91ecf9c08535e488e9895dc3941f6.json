{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React, { Component } from 'react';\nimport * as THREE from 'three';\nimport Dropzone from 'react-dropzone';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport RubberDuck from './../../assets/cad-rubber-duck.stl';\n\nclass Render extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    var mesh, renderer, scene, camera, controls, bb, rect;\n    var rotate = 'Z';\n    var vector = new THREE.Vector3(-1, 0, 0);\n    var pause = false;\n    init();\n    load();\n\n    function load() {\n      var loader = new STLLoader();\n      loader.load(RubberDuck, function (geometry) {\n        geometry.center();\n        var material = new THREE.MeshNormalMaterial();\n        mesh = new THREE.Mesh(geometry, material);\n        var boundingBox = new THREE.Box3().setFromObject(mesh);\n        var sizeHouse = bb.getSize();\n        var sizeObject = boundingBox.getSize();\n        var ratio = sizeObject.divide(sizeHouse);\n        var maxRatio = Math.max(ratio.x, ratio.y, ratio.z);\n        var invertRatio = 1 / maxRatio;\n        mesh.scale.set(invertRatio, invertRatio, invertRatio);\n        mesh.position.set(0, 0.25, 0);\n        mesh.setRotationFromAxisAngle(vector, Math.PI / 2);\n        scene.add(mesh);\n        animate();\n      });\n    }\n\n    function init() {\n      var container = document.getElementById(\"container\");\n      rect = container.getBoundingClientRect();\n      renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(rect.width - 2, rect.height - 2);\n      container.appendChild(renderer.domElement);\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(0xF8F9FA);\n      camera = new THREE.PerspectiveCamera(1, rect.width / rect.height, 1, 1000);\n      controls = new OrbitControls(camera, container);\n      var boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n      var boxMaterial = new THREE.MeshNormalMaterial();\n      var boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\n      bb = new THREE.Box3().setFromObject(boxMesh);\n      var height = bb.getSize().y;\n      var dist = height / 2 / Math.tan(Math.PI * 1 / 360);\n      camera.position.set(dist + 25, dist + 25, dist + 25);\n      camera.lookAt(boxMesh.position);\n      window.addEventListener('resize', onWindowResize, false);\n      document.getElementById(\"container\").addEventListener('mousedown', mousedownfunc, false);\n      document.getElementById(\"container\").addEventListener('mouseup', mouseupfunc, false);\n    }\n\n    function mousedownfunc() {\n      pause = true;\n    }\n\n    function mouseupfunc() {\n      pause = false;\n    }\n\n    function onWindowResize() {\n      camera.aspect = rect.width / rect.height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(rect.width - 2, rect.height - 2);\n    }\n\n    function animate() {\n      if (!pause) {\n        if (rotate === 'X') {\n          mesh.rotation.x += 0.01;\n        } else if (rotate === 'Y') {\n          mesh.rotation.y += 0.01;\n        } else if (rotate === 'Z') {\n          mesh.rotation.z += 0.01;\n        }\n      }\n\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"container\",\n      style: {\n        postion: \"absolute\",\n        marginRight: \"70px\",\n        borderStyle: \"solid\",\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: \"700px\",\n        width: \"700px\",\n        backgroundColor: \"#F8F9FA\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.componentDidMount().openFile));\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","Component","THREE","Dropzone","OrbitControls","STLLoader","RubberDuck","Render","constructor","props","componentDidMount","mesh","renderer","scene","camera","controls","bb","rect","rotate","vector","Vector3","pause","init","load","loader","geometry","center","material","MeshNormalMaterial","Mesh","boundingBox","Box3","setFromObject","sizeHouse","getSize","sizeObject","ratio","divide","maxRatio","Math","max","x","y","z","invertRatio","scale","set","position","setRotationFromAxisAngle","PI","add","animate","container","document","getElementById","getBoundingClientRect","WebGLRenderer","antialias","setSize","width","height","appendChild","domElement","Scene","background","Color","PerspectiveCamera","boxGeometry","BoxGeometry","boxMaterial","boxMesh","dist","tan","lookAt","window","addEventListener","onWindowResize","mousedownfunc","mouseupfunc","aspect","updateProjectionMatrix","rotation","requestAnimationFrame","render","postion","marginRight","borderStyle","display","justifyContent","alignItems","backgroundColor","openFile"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport * as THREE from 'three';\nimport Dropzone from 'react-dropzone'\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\nimport RubberDuck from './../../assets/cad-rubber-duck.stl';\n\nclass Render extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        var mesh, renderer, scene, camera, controls, bb, rect;\n        var rotate = 'Z';\n        var vector = new THREE.Vector3(-1, 0, 0);\n        var pause = false;\n\n        init();\n        load();\n\n        function load() {\n            var loader = new STLLoader();\n            loader.load(RubberDuck, function (geometry) {\n                geometry.center();\n                var material = new THREE.MeshNormalMaterial();\n                mesh = new THREE.Mesh(geometry, material);\n                var boundingBox = new THREE.Box3().setFromObject(mesh);\n                var sizeHouse = bb.getSize();\n                var sizeObject = boundingBox.getSize();\n                var ratio = sizeObject.divide(sizeHouse);\n                var maxRatio = Math.max(ratio.x, ratio.y, ratio.z);\n                var invertRatio = 1 / maxRatio;\n                mesh.scale.set(invertRatio, invertRatio, invertRatio);\n                mesh.position.set(0, 0.25, 0);\n                mesh.setRotationFromAxisAngle(vector, Math.PI/2);\n                scene.add(mesh);\n                animate();\n            });\n\n        }\n\n        function init() {\n            var container = document.getElementById(\"container\");\n            rect = container.getBoundingClientRect();\n\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setSize(rect.width - 2, rect.height - 2);\n\n            container.appendChild(renderer.domElement);\n\n            scene = new THREE.Scene();\n            scene.background = new THREE.Color(0xF8F9FA);\n            camera = new THREE.PerspectiveCamera(1, rect.width / rect.height, 1, 1000);\n            controls = new OrbitControls(camera, container);\n\n            var boxGeometry = new THREE.BoxGeometry(1, 1, 1);\n            var boxMaterial = new THREE.MeshNormalMaterial();\n            var boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\n            bb = new THREE.Box3().setFromObject(boxMesh);\n            var height = bb.getSize().y;\n            var dist = height / 2 / Math.tan(Math.PI * 1 / 360);\n            camera.position.set(dist + 25, dist + 25, dist + 25);\n            camera.lookAt(boxMesh.position);\n\n            window.addEventListener('resize', onWindowResize, false);\n            document.getElementById(\"container\").addEventListener('mousedown', mousedownfunc, false);\n            document.getElementById(\"container\").addEventListener('mouseup', mouseupfunc, false);\n        }\n\n        function mousedownfunc() {\n            pause = true;\n        }\n\n        function mouseupfunc() {\n            pause = false;\n        }\n\n        function onWindowResize() {\n            camera.aspect = (rect.width) / (rect.height);\n            camera.updateProjectionMatrix();\n            renderer.setSize(rect.width - 2, rect.height - 2);\n        }\n\n        function animate() {\n            if (!pause) {\n                if (rotate === 'X') {\n                    mesh.rotation.x += 0.01;\n                }\n                else if (rotate === 'Y') {\n                    mesh.rotation.y += 0.01;\n                }\n                else if (rotate === 'Z') {\n                    mesh.rotation.z += 0.01;\n                }\n            }\n            requestAnimationFrame(animate);\n            renderer.render(scene, camera);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div id=\"container\" style={{ postion: \"absolute\", marginRight: \"70px\", borderStyle: \"solid\", display: 'flex', justifyContent: 'center', alignItems: 'center', height: \"700px\", width: \"700px\", backgroundColor: \"#F8F9FA\" }}>\n                    {this.componentDidMount().openFile}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Render;\n"]},"metadata":{},"sourceType":"module"}