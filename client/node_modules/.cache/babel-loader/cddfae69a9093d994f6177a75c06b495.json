{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nclass Render extends React.Component {\n  load(file, doAnimate) {\n    const tempURL = URL.createObjectURL(file);\n    var str = file.name.split('.').pop();\n    var ext = str.toLowerCase();\n    var loader;\n\n    if (ext === 'stl') {\n      loader = new STLLoader();\n      loader.load(tempURL, function (geometry) {\n        geometry.center();\n        make(geometry, doAnimate);\n      });\n    }\n  }\n\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    this.mount.appendChild(renderer.domElement);\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","ReactDOM","THREE","STLLoader","Render","Component","load","file","doAnimate","tempURL","URL","createObjectURL","str","name","split","pop","ext","toLowerCase","loader","geometry","center","make","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","ref"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,QAAwB,sCAAxB;;AAEA,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;AACnCC,EAAAA,IAAI,CAACC,IAAD,EAAOC,SAAP,EAAkB;AAChB,UAAMC,OAAO,GAAGC,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAhB;AAEA,QAAIK,GAAG,GAAGL,IAAI,CAACM,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAAV;AACA,QAAIC,GAAG,GAAGJ,GAAG,CAACK,WAAJ,EAAV;AACA,QAAIC,MAAJ;;AAEA,QAAIF,GAAG,KAAK,KAAZ,EAAmB;AACfE,MAAAA,MAAM,GAAG,IAAIf,SAAJ,EAAT;AACAe,MAAAA,MAAM,CAACZ,IAAP,CAAYG,OAAZ,EAAqB,UAAUU,QAAV,EAAoB;AACrCA,QAAAA,QAAQ,CAACC,MAAT;AACAC,QAAAA,IAAI,CAACF,QAAD,EAAWX,SAAX,CAAJ;AACH,OAHD;AAIH;AACN;;AAGDc,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAG,IAAIrB,KAAK,CAACsB,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIvB,KAAK,CAACwB,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,aAAV,EAAf;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C,EAJkB,CAKlB;AACA;;AACA,SAAKI,KAAL,CAAWC,WAAX,CAAwBJ,QAAQ,CAACK,UAAjC;AACA,QAAIhB,QAAQ,GAAG,IAAIjB,KAAK,CAACkC,WAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAInC,KAAK,CAACoC,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAItC,KAAK,CAACuC,IAAV,CAAgBtB,QAAhB,EAA0BkB,QAA1B,CAAX;AACAd,IAAAA,KAAK,CAACmB,GAAN,CAAWF,IAAX;AACAf,IAAAA,MAAM,CAACkB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACAnB,MAAAA,QAAQ,CAACoB,MAAT,CAAiB3B,KAAjB,EAAwBE,MAAxB;AACD,KALD;;AAMAoB,IAAAA,OAAO;AACR;;AAEDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,GAAG,EAAEC,GAAG,IAAK,KAAKlB,KAAL,GAAakB,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA5CkC;;AA8CrC,eAAe/C,MAAf","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\n\nclass Render extends React.Component {\n  load(file, doAnimate) {\n        const tempURL = URL.createObjectURL(file);\n\n        var str = file.name.split('.').pop();\n        var ext = str.toLowerCase();\n        var loader;\n\n        if (ext === 'stl') {\n            loader = new STLLoader();\n            loader.load(tempURL, function (geometry) {\n                geometry.center();\n                make(geometry, doAnimate);\n            });\n        }\n  }\n\n\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    this.mount.appendChild( renderer.domElement );\n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var cube = new THREE.Mesh( geometry, material );\n    scene.add( cube );\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame( animate );\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  }\n\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nexport default Render"]},"metadata":{},"sourceType":"module"}