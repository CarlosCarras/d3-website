{"ast":null,"code":"/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @author @tentone\n * @author @timknip\n * @class TDSLoader\n * @constructor\n */\nimport { AdditiveBlending, BufferGeometry, Color, DoubleSide, FileLoader, Float32BufferAttribute, Group, Loader, LoaderUtils, Matrix4, Mesh, MeshPhongMaterial, TextureLoader } from \"../../../build/three.module.js\";\n\nvar TDSLoader = function (manager) {\n  Loader.call(this, manager);\n  this.debug = false;\n  this.group = null;\n  this.position = 0;\n  this.materials = [];\n  this.meshes = [];\n};\n\nTDSLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: TDSLoader,\n\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (data) {\n      onLoad(scope.parse(data, path));\n    }, onProgress, onError);\n  },\n\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse: function (arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (var i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  },\n\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile: function (arraybuffer, path) {\n    var data = new DataView(arraybuffer);\n    var chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          var version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        var version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        var scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  },\n\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject: function (data) {\n    var chunk = this.readChunk(data);\n    var name = this.readString(data, 64);\n    chunk.cur = this.position;\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        var mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        var value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        var shininess = this.readWord(data);\n        material.shininess = shininess;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        var opacity = this.readWord(data);\n        material.opacity = opacity * 0.01;\n        this.debugMessage('  Opacity : ' + opacity);\n        material.transparent = opacity < 100 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh: function (data) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var geometry = new BufferGeometry();\n    var uvs = [];\n    var material = new MeshPhongMaterial();\n    var mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        var points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        var vertices = [];\n\n        for (var i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        var texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        var uvs = [];\n\n        for (var i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        var values = [];\n\n        for (var i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n\n        var matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        var inverse = new Matrix4();\n        inverse.getInverse(matrix, true);\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  },\n\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray: function (data, mesh) {\n    var chunk = this.readChunk(data);\n    var faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    var index = [];\n\n    for (var i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    while (this.position < chunk.end) {\n      var chunk = this.readChunk(data);\n\n      if (chunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        var group = this.readMaterialGroup(data);\n        var material = this.materials[group.name];\n\n        if (material !== undefined) {\n          mesh.material = material;\n\n          if (material.name === '') {\n            material.name = mesh.name;\n          }\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + chunk.toString(16));\n      }\n\n      this.endChunk(chunk);\n    }\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var texture = {};\n    var loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        var name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  },\n\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup: function (data) {\n    this.readChunk(data);\n    var name = this.readString(data, 64);\n    var numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    var index = [];\n\n    for (var i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name: name,\n      index: index\n    };\n  },\n\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor: function (data) {\n    var chunk = this.readChunk(data);\n    var color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      var r = this.readByte(data);\n      var g = this.readByte(data);\n      var b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      var r = this.readFloat(data);\n      var g = this.readFloat(data);\n      var b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  },\n\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk: function (data) {\n    var chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  },\n\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk: function (chunk) {\n    this.position = chunk.end;\n  },\n\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk: function (data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      var next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  },\n\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition: function () {\n    this.position -= 6;\n  },\n\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte: function (data) {\n    var v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  },\n\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat: function (data) {\n    try {\n      var v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  },\n\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt: function (data) {\n    var v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort: function (data) {\n    var v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord: function (data) {\n    var v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord: function (data) {\n    var v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString: function (data, maxLength) {\n    var s = '';\n\n    for (var i = 0; i < maxLength; i++) {\n      var c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  },\n\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage: function (message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}); // var NULL_CHUNK = 0x0000;\n\nvar M3DMAGIC = 0x4D4D; // var SMAGIC = 0x2D2D;\n// var LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3DAA; // var MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xC23D;\nvar M3D_VERSION = 0x0002; // var M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013; // var INT_PERCENTAGE = 0x0030;\n// var FLOAT_PERCENTAGE = 0x0031;\n\nvar MDATA = 0x3D3D;\nvar MESH_VERSION = 0x3D3E;\nvar MASTER_SCALE = 0x0100; // var LO_SHADOW_BIAS = 0x1400;\n// var HI_SHADOW_BIAS = 0x1410;\n// var SHADOW_MAP_SIZE = 0x1420;\n// var SHADOW_SAMPLES = 0x1430;\n// var SHADOW_RANGE = 0x1440;\n// var SHADOW_FILTER = 0x1450;\n// var RAY_BIAS = 0x1460;\n// var O_CONSTS = 0x1500;\n// var AMBIENT_LIGHT = 0x2100;\n// var BIT_MAP = 0x1100;\n// var SOLID_BGND = 0x1200;\n// var V_GRADIENT = 0x1300;\n// var USE_BIT_MAP = 0x1101;\n// var USE_SOLID_BGND = 0x1201;\n// var USE_V_GRADIENT = 0x1301;\n// var FOG = 0x2200;\n// var FOG_BGND = 0x2210;\n// var LAYER_FOG = 0x2302;\n// var DISTANCE_CUE = 0x2300;\n// var DCUE_BGND = 0x2310;\n// var USE_FOG = 0x2201;\n// var USE_LAYER_FOG = 0x2303;\n// var USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xAFFF;\nvar MAT_NAME = 0xA000;\nvar MAT_AMBIENT = 0xA010;\nvar MAT_DIFFUSE = 0xA020;\nvar MAT_SPECULAR = 0xA030;\nvar MAT_SHININESS = 0xA040; // var MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xA050; // var MAT_XPFALL = 0xA052;\n// var MAT_USE_XPFALL = 0xA240;\n// var MAT_REFBLUR = 0xA053;\n// var MAT_SHADING = 0xA100;\n// var MAT_USE_REFBLUR = 0xA250;\n// var MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xA081; // var MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xA083;\nvar MAT_WIRE = 0xA085; // var MAT_FACEMAP = 0xA088;\n// var MAT_TRANSFALLOFF_IN = 0xA08A;\n// var MAT_PHONGSOFT = 0xA08C;\n// var MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xA087;\nvar MAT_TEXMAP = 0xA200; // var MAT_SXP_TEXT_DATA = 0xA320;\n// var MAT_TEXMASK = 0xA33E;\n// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// var MAT_TEX2MAP = 0xA33A;\n// var MAT_SXP_TEXT2_DATA = 0xA321;\n// var MAT_TEX2MASK = 0xA340;\n// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xA210; // var MAT_SXP_OPAC_DATA = 0xA322;\n// var MAT_OPACMASK = 0xA342;\n// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xA230; // var MAT_SXP_BUMP_DATA = 0xA324;\n// var MAT_BUMPMASK = 0xA344;\n// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xA204; // var MAT_SXP_SPEC_DATA = 0xA325;\n// var MAT_SPECMASK = 0xA348;\n// var MAT_SXP_SPECMASK_DATA = 0xA332;\n// var MAT_SHINMAP = 0xA33C;\n// var MAT_SXP_SHIN_DATA = 0xA326;\n// var MAT_SHINMASK = 0xA346;\n// var MAT_SXP_SHINMASK_DATA = 0xA334;\n// var MAT_SELFIMAP = 0xA33D;\n// var MAT_SXP_SELFI_DATA = 0xA328;\n// var MAT_SELFIMASK = 0xA34A;\n// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n// var MAT_REFLMAP = 0xA220;\n// var MAT_REFLMASK = 0xA34C;\n// var MAT_SXP_REFLMASK_DATA = 0xA338;\n// var MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xA300; // var MAT_MAP_TILING = 0xA351;\n// var MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xA354;\nvar MAT_MAP_VSCALE = 0xA356;\nvar MAT_MAP_UOFFSET = 0xA358;\nvar MAT_MAP_VOFFSET = 0xA35A; // var MAT_MAP_ANG = 0xA35C;\n// var MAT_MAP_COL1 = 0xA360;\n// var MAT_MAP_COL2 = 0xA362;\n// var MAT_MAP_RCOL = 0xA364;\n// var MAT_MAP_GCOL = 0xA366;\n// var MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // var N_DIRECT_LIGHT = 0x4600;\n// var DL_OFF = 0x4620;\n// var DL_OUTER_RANGE = 0x465A;\n// var DL_INNER_RANGE = 0x4659;\n// var DL_MULTIPLIER = 0x465B;\n// var DL_EXCLUDE = 0x4654;\n// var DL_ATTENUATE = 0x4625;\n// var DL_SPOTLIGHT = 0x4610;\n// var DL_SPOT_ROLL = 0x4656;\n// var DL_SHADOWED = 0x4630;\n// var DL_LOCAL_SHADOW2 = 0x4641;\n// var DL_SEE_CONE = 0x4650;\n// var DL_SPOT_RECTANGULAR = 0x4651;\n// var DL_SPOT_ASPECT = 0x4657;\n// var DL_SPOT_PROJECTOR = 0x4653;\n// var DL_SPOT_OVERSHOOT = 0x4652;\n// var DL_RAY_BIAS = 0x4658;\n// var DL_RAYSHAD = 0x4627;\n// var N_CAMERA = 0x4700;\n// var CAM_SEE_CONE = 0x4710;\n// var CAM_RANGES = 0x4720;\n// var OBJ_HIDDEN = 0x4010;\n// var OBJ_VIS_LOFTER = 0x4011;\n// var OBJ_DOESNT_CAST = 0x4012;\n// var OBJ_DONT_RECVSHADOW = 0x4017;\n// var OBJ_MATTE = 0x4013;\n// var OBJ_FAST = 0x4014;\n// var OBJ_PROCEDURAL = 0x4015;\n// var OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // var POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // var SMOOTH_GROUP = 0x4150;\n// var MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // var MESH_COLOR = 0x4165;\n// var MESH_TEXTURE_INFO = 0x4170;\n// var KFDATA = 0xB000;\n// var KFHDR = 0xB00A;\n// var KFSEG = 0xB008;\n// var KFCURTIME = 0xB009;\n// var AMBIENT_NODE_TAG = 0xB001;\n// var OBJECT_NODE_TAG = 0xB002;\n// var CAMERA_NODE_TAG = 0xB003;\n// var TARGET_NODE_TAG = 0xB004;\n// var LIGHT_NODE_TAG = 0xB005;\n// var L_TARGET_NODE_TAG = 0xB006;\n// var SPOTLIGHT_NODE_TAG = 0xB007;\n// var NODE_ID = 0xB030;\n// var NODE_HDR = 0xB010;\n// var PIVOT = 0xB013;\n// var INSTANCE_NAME = 0xB011;\n// var MORPH_SMOOTH = 0xB015;\n// var BOUNDBOX = 0xB014;\n// var POS_TRACK_TAG = 0xB020;\n// var COL_TRACK_TAG = 0xB025;\n// var ROT_TRACK_TAG = 0xB021;\n// var SCL_TRACK_TAG = 0xB022;\n// var MORPH_TRACK_TAG = 0xB026;\n// var FOV_TRACK_TAG = 0xB023;\n// var ROLL_TRACK_TAG = 0xB024;\n// var HOT_TRACK_TAG = 0xB027;\n// var FALL_TRACK_TAG = 0xB028;\n// var HIDE_TRACK_TAG = 0xB029;\n// var POLY_2D = 0x5000;\n// var SHAPE_OK = 0x5010;\n// var SHAPE_NOT_OK = 0x5011;\n// var SHAPE_HOOK = 0x5020;\n// var PATH_3D = 0x6000;\n// var PATH_MATRIX = 0x6005;\n// var SHAPE_2D = 0x6010;\n// var M_SCALE = 0x6020;\n// var M_TWIST = 0x6030;\n// var M_TEETER = 0x6040;\n// var M_FIT = 0x6050;\n// var M_BEVEL = 0x6060;\n// var XZ_CURVE = 0x6070;\n// var YZ_CURVE = 0x6080;\n// var INTERPCT = 0x6090;\n// var DEFORM_LIMIT = 0x60A0;\n// var USE_CONTOUR = 0x6100;\n// var USE_TWEEN = 0x6110;\n// var USE_SCALE = 0x6120;\n// var USE_TWIST = 0x6130;\n// var USE_TEETER = 0x6140;\n// var USE_FIT = 0x6150;\n// var USE_BEVEL = 0x6160;\n// var DEFAULT_VIEW = 0x3000;\n// var VIEW_TOP = 0x3010;\n// var VIEW_BOTTOM = 0x3020;\n// var VIEW_LEFT = 0x3030;\n// var VIEW_RIGHT = 0x3040;\n// var VIEW_FRONT = 0x3050;\n// var VIEW_BACK = 0x3060;\n// var VIEW_USER = 0x3070;\n// var VIEW_CAMERA = 0x3080;\n// var VIEW_WINDOW = 0x3090;\n// var VIEWPORT_LAYOUT_OLD = 0x7000;\n// var VIEWPORT_DATA_OLD = 0x7010;\n// var VIEWPORT_LAYOUT = 0x7001;\n// var VIEWPORT_DATA = 0x7011;\n// var VIEWPORT_DATA_3 = 0x7012;\n// var VIEWPORT_SIZE = 0x7020;\n// var NETWORK_VIEW = 0x7030;\n\nexport { TDSLoader };","map":{"version":3,"sources":["/Users/carloscarrasquillo/node_modules/three/examples/jsm/loaders/TDSLoader.js"],"names":["AdditiveBlending","BufferGeometry","Color","DoubleSide","FileLoader","Float32BufferAttribute","Group","Loader","LoaderUtils","Matrix4","Mesh","MeshPhongMaterial","TextureLoader","TDSLoader","manager","call","debug","group","position","materials","meshes","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","data","parse","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readWord","MAT_TRANSPARENCY","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","uvs","POINT_ARRAY","points","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","values","matrix","elements","transpose","inverse","getInverse","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","end","MSH_MAT_GROUP","readMaterialGroup","undefined","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","e","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","message","console","log"],"mappings":"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lB,C,CACA;AACA;;AACA,IAAIvG,KAAK,GAAG,MAAZ;AACA,IAAII,YAAY,GAAG,MAAnB;AACA,IAAIC,YAAY,GAAG,MAAnB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIM,SAAS,GAAG,MAAhB;AACA,IAAIW,QAAQ,GAAG,MAAf;AACA,IAAIgB,WAAW,GAAG,MAAlB;AACA,IAAIL,WAAW,GAAG,MAAlB;AACA,IAAIG,YAAY,GAAG,MAAnB;AACA,IAAIG,aAAa,GAAG,MAApB,C,CACA;;AACA,IAAIG,gBAAgB,GAAG,MAAvB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIb,YAAY,GAAG,MAAnB,C,CACA;;AACA,IAAIE,YAAY,GAAG,MAAnB;AACA,IAAIR,QAAQ,GAAG,MAAf,C,CACA;AACA;AACA;AACA;;AACA,IAAIE,aAAa,GAAG,MAApB;AACA,IAAIoB,UAAU,GAAG,MAAjB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIK,WAAW,GAAG,MAAlB,C,CACA;AACA;AACA;;AACA,IAAIF,WAAW,GAAG,MAAlB,C,CACA;AACA;AACA;;AACA,IAAII,WAAW,GAAG,MAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIkC,WAAW,GAAG,MAAlB,C,CACA;AACA;;AACA,IAAIM,cAAc,GAAG,MAArB;AACA,IAAIE,cAAc,GAAG,MAArB;AACA,IAAIP,eAAe,GAAG,MAAtB;AACA,IAAIG,eAAe,GAAG,MAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIjF,YAAY,GAAG,MAAnB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIO,YAAY,GAAG,MAAnB;AACA,IAAIwC,WAAW,GAAG,MAAlB,C,CACA;;AACA,IAAII,UAAU,GAAG,MAAjB;AACA,IAAImB,aAAa,GAAG,MAApB,C,CACA;AACA;;AACA,IAAIjB,SAAS,GAAG,MAAhB;AACA,IAAIE,WAAW,GAAG,MAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS5G,SAAT","sourcesContent":["/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @author @tentone\n * @author @timknip\n * @class TDSLoader\n * @constructor\n */\n\nimport {\n\tAdditiveBlending,\n\tBufferGeometry,\n\tColor,\n\tDoubleSide,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLoader,\n\tLoaderUtils,\n\tMatrix4,\n\tMesh,\n\tMeshPhongMaterial,\n\tTextureLoader\n} from \"../../../build/three.module.js\";\n\nvar TDSLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.debug = false;\n\n\tthis.group = null;\n\tthis.position = 0;\n\n\tthis.materials = [];\n\tthis.meshes = [];\n\n};\n\nTDSLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TDSLoader,\n\n\t/**\n\t * Load 3ds file from url.\n\t *\n\t * @method load\n\t * @param {[type]} url URL for the file.\n\t * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n\t * @param {Function} onProgress onProgress callback.\n\t * @param {Function} onError onError callback.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, function ( data ) {\n\n\t\t\tonLoad( scope.parse( data, path ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * Parse arraybuffer data and load 3ds file.\n\t *\n\t * @method parse\n\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n\t * @param {String} path Path for external resources.\n\t * @return {Group} Group loaded from 3ds file.\n\t */\n\tparse: function ( arraybuffer, path ) {\n\n\t\tthis.group = new Group();\n\t\tthis.position = 0;\n\t\tthis.materials = [];\n\t\tthis.meshes = [];\n\n\t\tthis.readFile( arraybuffer, path );\n\n\t\tfor ( var i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis.group.add( this.meshes[ i ] );\n\n\t\t}\n\n\t\treturn this.group;\n\n\t},\n\n\t/**\n\t * Decode file content to read 3ds data.\n\t *\n\t * @method readFile\n\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n\t * @param {String} path Path for external resources.\n\t */\n\treadFile: function ( arraybuffer, path ) {\n\n\t\tvar data = new DataView( arraybuffer );\n\t\tvar chunk = this.readChunk( data );\n\n\t\tif ( chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC ) {\n\n\t\t\tvar next = this.nextChunk( data, chunk );\n\n\t\t\twhile ( next !== 0 ) {\n\n\t\t\t\tif ( next === M3D_VERSION ) {\n\n\t\t\t\t\tvar version = this.readDWord( data );\n\t\t\t\t\tthis.debugMessage( '3DS file version: ' + version );\n\n\t\t\t\t} else if ( next === MDATA ) {\n\n\t\t\t\t\tthis.resetPosition( data );\n\t\t\t\t\tthis.readMeshData( data, path );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.debugMessage( 'Unknown main chunk: ' + next.toString( 16 ) );\n\n\t\t\t\t}\n\n\t\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.debugMessage( 'Parsed ' + this.meshes.length + ' meshes' );\n\n\t},\n\n\t/**\n\t * Read mesh data chunk.\n\t *\n\t * @method readMeshData\n\t * @param {Dataview} data Dataview in use.\n\t * @param {String} path Path for external resources.\n\t */\n\treadMeshData: function ( data, path ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar next = this.nextChunk( data, chunk );\n\n\t\twhile ( next !== 0 ) {\n\n\t\t\tif ( next === MESH_VERSION ) {\n\n\t\t\t\tvar version = + this.readDWord( data );\n\t\t\t\tthis.debugMessage( 'Mesh Version: ' + version );\n\n\t\t\t} else if ( next === MASTER_SCALE ) {\n\n\t\t\t\tvar scale = this.readFloat( data );\n\t\t\t\tthis.debugMessage( 'Master scale: ' + scale );\n\t\t\t\tthis.group.scale.set( scale, scale, scale );\n\n\t\t\t} else if ( next === NAMED_OBJECT ) {\n\n\t\t\t\tthis.debugMessage( 'Named Object' );\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tthis.readNamedObject( data );\n\n\t\t\t} else if ( next === MAT_ENTRY ) {\n\n\t\t\t\tthis.debugMessage( 'Material' );\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tthis.readMaterialEntry( data, path );\n\n\t\t\t} else {\n\n\t\t\t\tthis.debugMessage( 'Unknown MDATA chunk: ' + next.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Read named object chunk.\n\t *\n\t * @method readNamedObject\n\t * @param {Dataview} data Dataview in use.\n\t */\n\treadNamedObject: function ( data ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar name = this.readString( data, 64 );\n\t\tchunk.cur = this.position;\n\n\t\tvar next = this.nextChunk( data, chunk );\n\t\twhile ( next !== 0 ) {\n\n\t\t\tif ( next === N_TRI_OBJECT ) {\n\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tvar mesh = this.readMesh( data );\n\t\t\t\tmesh.name = name;\n\t\t\t\tthis.meshes.push( mesh );\n\n\t\t\t} else {\n\n\t\t\t\tthis.debugMessage( 'Unknown named object chunk: ' + next.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t}\n\n\t\tthis.endChunk( chunk );\n\n\t},\n\n\t/**\n\t * Read material data chunk and add it to the material list.\n\t *\n\t * @method readMaterialEntry\n\t * @param {Dataview} data Dataview in use.\n\t * @param {String} path Path for external resources.\n\t */\n\treadMaterialEntry: function ( data, path ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar next = this.nextChunk( data, chunk );\n\t\tvar material = new MeshPhongMaterial();\n\n\t\twhile ( next !== 0 ) {\n\n\t\t\tif ( next === MAT_NAME ) {\n\n\t\t\t\tmaterial.name = this.readString( data, 64 );\n\t\t\t\tthis.debugMessage( '   Name: ' + material.name );\n\n\t\t\t} else if ( next === MAT_WIRE ) {\n\n\t\t\t\tthis.debugMessage( '   Wireframe' );\n\t\t\t\tmaterial.wireframe = true;\n\n\t\t\t} else if ( next === MAT_WIRE_SIZE ) {\n\n\t\t\t\tvar value = this.readByte( data );\n\t\t\t\tmaterial.wireframeLinewidth = value;\n\t\t\t\tthis.debugMessage( '   Wireframe Thickness: ' + value );\n\n\t\t\t} else if ( next === MAT_TWO_SIDE ) {\n\n\t\t\t\tmaterial.side = DoubleSide;\n\t\t\t\tthis.debugMessage( '   DoubleSided' );\n\n\t\t\t} else if ( next === MAT_ADDITIVE ) {\n\n\t\t\t\tthis.debugMessage( '   Additive Blending' );\n\t\t\t\tmaterial.blending = AdditiveBlending;\n\n\t\t\t} else if ( next === MAT_DIFFUSE ) {\n\n\t\t\t\tthis.debugMessage( '   Diffuse Color' );\n\t\t\t\tmaterial.color = this.readColor( data );\n\n\t\t\t} else if ( next === MAT_SPECULAR ) {\n\n\t\t\t\tthis.debugMessage( '   Specular Color' );\n\t\t\t\tmaterial.specular = this.readColor( data );\n\n\t\t\t} else if ( next === MAT_AMBIENT ) {\n\n\t\t\t\tthis.debugMessage( '   Ambient color' );\n\t\t\t\tmaterial.color = this.readColor( data );\n\n\t\t\t} else if ( next === MAT_SHININESS ) {\n\n\t\t\t\tvar shininess = this.readWord( data );\n\t\t\t\tmaterial.shininess = shininess;\n\t\t\t\tthis.debugMessage( '   Shininess : ' + shininess );\n\n\t\t\t} else if ( next === MAT_TRANSPARENCY ) {\n\n\t\t\t\tvar opacity = this.readWord( data );\n\t\t\t\tmaterial.opacity = opacity * 0.01;\n\t\t\t\tthis.debugMessage( '  Opacity : ' + opacity );\n\t\t\t\tmaterial.transparent = opacity < 100 ? true : false;\n\n\t\t\t} else if ( next === MAT_TEXMAP ) {\n\n\t\t\t\tthis.debugMessage( '   ColorMap' );\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tmaterial.map = this.readMap( data, path );\n\n\t\t\t} else if ( next === MAT_BUMPMAP ) {\n\n\t\t\t\tthis.debugMessage( '   BumpMap' );\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tmaterial.bumpMap = this.readMap( data, path );\n\n\t\t\t} else if ( next === MAT_OPACMAP ) {\n\n\t\t\t\tthis.debugMessage( '   OpacityMap' );\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tmaterial.alphaMap = this.readMap( data, path );\n\n\t\t\t} else if ( next === MAT_SPECMAP ) {\n\n\t\t\t\tthis.debugMessage( '   SpecularMap' );\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tmaterial.specularMap = this.readMap( data, path );\n\n\t\t\t} else {\n\n\t\t\t\tthis.debugMessage( '   Unknown material chunk: ' + next.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t}\n\n\t\tthis.endChunk( chunk );\n\n\t\tthis.materials[ material.name ] = material;\n\n\t},\n\n\t/**\n\t * Read mesh data chunk.\n\t *\n\t * @method readMesh\n\t * @param {Dataview} data Dataview in use.\n\t * @return {Mesh} The parsed mesh.\n\t */\n\treadMesh: function ( data ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar next = this.nextChunk( data, chunk );\n\n\t\tvar geometry = new BufferGeometry();\n\t\tvar uvs = [];\n\n\t\tvar material = new MeshPhongMaterial();\n\t\tvar mesh = new Mesh( geometry, material );\n\t\tmesh.name = 'mesh';\n\n\t\twhile ( next !== 0 ) {\n\n\t\t\tif ( next === POINT_ARRAY ) {\n\n\t\t\t\tvar points = this.readWord( data );\n\n\t\t\t\tthis.debugMessage( '   Vertex: ' + points );\n\n\t\t\t\t//BufferGeometry\n\n\t\t\t\tvar vertices = [];\n\n\t\t\t\tfor ( var i = 0; i < points; i ++ )\t\t{\n\n\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\t\t\t\t\tvertices.push( this.readFloat( data ) );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t\t} else if ( next === FACE_ARRAY ) {\n\n\t\t\t\tthis.resetPosition( data );\n\t\t\t\tthis.readFaceArray( data, mesh );\n\n\t\t\t} else if ( next === TEX_VERTS ) {\n\n\t\t\t\tvar texels = this.readWord( data );\n\n\t\t\t\tthis.debugMessage( '   UV: ' + texels );\n\n\t\t\t\t//BufferGeometry\n\n\t\t\t\tvar uvs = [];\n\n\t\t\t\tfor ( var i = 0; i < texels; i ++ )\t\t{\n\n\t\t\t\t\tuvs.push( this.readFloat( data ) );\n\t\t\t\t\tuvs.push( this.readFloat( data ) );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t\t} else if ( next === MESH_MATRIX ) {\n\n\t\t\t\tthis.debugMessage( '   Tranformation Matrix (TODO)' );\n\n\t\t\t\tvar values = [];\n\t\t\t\tfor ( var i = 0; i < 12; i ++ ) {\n\n\t\t\t\t\tvalues[ i ] = this.readFloat( data );\n\n\t\t\t\t}\n\n\t\t\t\tvar matrix = new Matrix4();\n\n\t\t\t\t//X Line\n\t\t\t\tmatrix.elements[ 0 ] = values[ 0 ];\n\t\t\t\tmatrix.elements[ 1 ] = values[ 6 ];\n\t\t\t\tmatrix.elements[ 2 ] = values[ 3 ];\n\t\t\t\tmatrix.elements[ 3 ] = values[ 9 ];\n\n\t\t\t\t//Y Line\n\t\t\t\tmatrix.elements[ 4 ] = values[ 2 ];\n\t\t\t\tmatrix.elements[ 5 ] = values[ 8 ];\n\t\t\t\tmatrix.elements[ 6 ] = values[ 5 ];\n\t\t\t\tmatrix.elements[ 7 ] = values[ 11 ];\n\n\t\t\t\t//Z Line\n\t\t\t\tmatrix.elements[ 8 ] = values[ 1 ];\n\t\t\t\tmatrix.elements[ 9 ] = values[ 7 ];\n\t\t\t\tmatrix.elements[ 10 ] = values[ 4 ];\n\t\t\t\tmatrix.elements[ 11 ] = values[ 10 ];\n\n\t\t\t\t//W Line\n\t\t\t\tmatrix.elements[ 12 ] = 0;\n\t\t\t\tmatrix.elements[ 13 ] = 0;\n\t\t\t\tmatrix.elements[ 14 ] = 0;\n\t\t\t\tmatrix.elements[ 15 ] = 1;\n\n\t\t\t\tmatrix.transpose();\n\n\t\t\t\tvar inverse = new Matrix4();\n\t\t\t\tinverse.getInverse( matrix, true );\n\t\t\t\tgeometry.applyMatrix4( inverse );\n\n\t\t\t\tmatrix.decompose( mesh.position, mesh.quaternion, mesh.scale );\n\n\t\t\t} else {\n\n\t\t\t\tthis.debugMessage( '   Unknown mesh chunk: ' + next.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t}\n\n\t\tthis.endChunk( chunk );\n\n\t\tgeometry.computeVertexNormals();\n\n\t\treturn mesh;\n\n\t},\n\n\t/**\n\t * Read face array data chunk.\n\t *\n\t * @method readFaceArray\n\t * @param {Dataview} data Dataview in use.\n\t * @param {Mesh} mesh Mesh to be filled with the data read.\n\t */\n\treadFaceArray: function ( data, mesh ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar faces = this.readWord( data );\n\n\t\tthis.debugMessage( '   Faces: ' + faces );\n\n\t\tvar index = [];\n\n\t\tfor ( var i = 0; i < faces; ++ i ) {\n\n\t\t\tindex.push( this.readWord( data ), this.readWord( data ), this.readWord( data ) );\n\n\t\t\tthis.readWord( data ); // visibility\n\n\t\t}\n\n\t\tmesh.geometry.setIndex( index );\n\n\t\t//The rest of the FACE_ARRAY chunk is subchunks\n\n\t\twhile ( this.position < chunk.end ) {\n\n\t\t\tvar chunk = this.readChunk( data );\n\n\t\t\tif ( chunk.id === MSH_MAT_GROUP ) {\n\n\t\t\t\tthis.debugMessage( '      Material Group' );\n\n\t\t\t\tthis.resetPosition( data );\n\n\t\t\t\tvar group = this.readMaterialGroup( data );\n\n\t\t\t\tvar material = this.materials[ group.name ];\n\n\t\t\t\tif ( material !== undefined )\t{\n\n\t\t\t\t\tmesh.material = material;\n\n\t\t\t\t\tif ( material.name === '' )\t\t{\n\n\t\t\t\t\t\tmaterial.name = mesh.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.debugMessage( '      Unknown face array chunk: ' + chunk.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tthis.endChunk( chunk );\n\n\t\t}\n\n\t\tthis.endChunk( chunk );\n\n\t},\n\n\t/**\n\t * Read texture map data chunk.\n\t *\n\t * @method readMap\n\t * @param {Dataview} data Dataview in use.\n\t * @param {String} path Path for external resources.\n\t * @return {Texture} Texture read from this data chunk.\n\t */\n\treadMap: function ( data, path ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar next = this.nextChunk( data, chunk );\n\t\tvar texture = {};\n\n\t\tvar loader = new TextureLoader( this.manager );\n\t\tloader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\twhile ( next !== 0 ) {\n\n\t\t\tif ( next === MAT_MAPNAME ) {\n\n\t\t\t\tvar name = this.readString( data, 128 );\n\t\t\t\ttexture = loader.load( name );\n\n\t\t\t\tthis.debugMessage( '      File: ' + path + name );\n\n\t\t\t} else if ( next === MAT_MAP_UOFFSET ) {\n\n\t\t\t\ttexture.offset.x = this.readFloat( data );\n\t\t\t\tthis.debugMessage( '      OffsetX: ' + texture.offset.x );\n\n\t\t\t} else if ( next === MAT_MAP_VOFFSET ) {\n\n\t\t\t\ttexture.offset.y = this.readFloat( data );\n\t\t\t\tthis.debugMessage( '      OffsetY: ' + texture.offset.y );\n\n\t\t\t} else if ( next === MAT_MAP_USCALE ) {\n\n\t\t\t\ttexture.repeat.x = this.readFloat( data );\n\t\t\t\tthis.debugMessage( '      RepeatX: ' + texture.repeat.x );\n\n\t\t\t} else if ( next === MAT_MAP_VSCALE ) {\n\n\t\t\t\ttexture.repeat.y = this.readFloat( data );\n\t\t\t\tthis.debugMessage( '      RepeatY: ' + texture.repeat.y );\n\n\t\t\t} else {\n\n\t\t\t\tthis.debugMessage( '      Unknown map chunk: ' + next.toString( 16 ) );\n\n\t\t\t}\n\n\t\t\tnext = this.nextChunk( data, chunk );\n\n\t\t}\n\n\t\tthis.endChunk( chunk );\n\n\t\treturn texture;\n\n\t},\n\n\t/**\n\t * Read material group data chunk.\n\t *\n\t * @method readMaterialGroup\n\t * @param {Dataview} data Dataview in use.\n\t * @return {Object} Object with name and index of the object.\n\t */\n\treadMaterialGroup: function ( data ) {\n\n\t\tthis.readChunk( data );\n\t\tvar name = this.readString( data, 64 );\n\t\tvar numFaces = this.readWord( data );\n\n\t\tthis.debugMessage( '         Name: ' + name );\n\t\tthis.debugMessage( '         Faces: ' + numFaces );\n\n\t\tvar index = [];\n\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\tindex.push( this.readWord( data ) );\n\n\t\t}\n\n\t\treturn { name: name, index: index };\n\n\t},\n\n\t/**\n\t * Read a color value.\n\t *\n\t * @method readColor\n\t * @param {DataView} data Dataview.\n\t * @return {Color} Color value read..\n\t */\n\treadColor: function ( data ) {\n\n\t\tvar chunk = this.readChunk( data );\n\t\tvar color = new Color();\n\n\t\tif ( chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24 ) {\n\n\t\t\tvar r = this.readByte( data );\n\t\t\tvar g = this.readByte( data );\n\t\t\tvar b = this.readByte( data );\n\n\t\t\tcolor.setRGB( r / 255, g / 255, b / 255 );\n\n\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\n\n\t\t}\telse if ( chunk.id === COLOR_F || chunk.id === LIN_COLOR_F ) {\n\n\t\t\tvar r = this.readFloat( data );\n\t\t\tvar g = this.readFloat( data );\n\t\t\tvar b = this.readFloat( data );\n\n\t\t\tcolor.setRGB( r, g, b );\n\n\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\n\n\t\t}\telse {\n\n\t\t\tthis.debugMessage( '      Unknown color chunk: ' + chunk.toString( 16 ) );\n\n\t\t}\n\n\t\tthis.endChunk( chunk );\n\t\treturn color;\n\n\t},\n\n\t/**\n\t * Read next chunk of data.\n\t *\n\t * @method readChunk\n\t * @param {DataView} data Dataview.\n\t * @return {Object} Chunk of data read.\n\t */\n\treadChunk: function ( data ) {\n\n\t\tvar chunk = {};\n\n\t\tchunk.cur = this.position;\n\t\tchunk.id = this.readWord( data );\n\t\tchunk.size = this.readDWord( data );\n\t\tchunk.end = chunk.cur + chunk.size;\n\t\tchunk.cur += 6;\n\n\t\treturn chunk;\n\n\t},\n\n\t/**\n\t * Set position to the end of the current chunk of data.\n\t *\n\t * @method endChunk\n\t * @param {Object} chunk Data chunk.\n\t */\n\tendChunk: function ( chunk ) {\n\n\t\tthis.position = chunk.end;\n\n\t},\n\n\t/**\n\t * Move to the next data chunk.\n\t *\n\t * @method nextChunk\n\t * @param {DataView} data Dataview.\n\t * @param {Object} chunk Data chunk.\n\t */\n\tnextChunk: function ( data, chunk ) {\n\n\t\tif ( chunk.cur >= chunk.end ) {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tthis.position = chunk.cur;\n\n\t\ttry {\n\n\t\t\tvar next = this.readChunk( data );\n\t\t\tchunk.cur += next.size;\n\t\t\treturn next.id;\n\n\t\t}\tcatch ( e ) {\n\n\t\t\tthis.debugMessage( 'Unable to read chunk at ' + this.position );\n\t\t\treturn 0;\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Reset dataview position.\n\t *\n\t * @method resetPosition\n\t */\n\tresetPosition: function () {\n\n\t\tthis.position -= 6;\n\n\t},\n\n\t/**\n\t * Read byte value.\n\t *\n\t * @method readByte\n\t * @param {DataView} data Dataview to read data from.\n\t * @return {Number} Data read from the dataview.\n\t */\n\treadByte: function ( data ) {\n\n\t\tvar v = data.getUint8( this.position, true );\n\t\tthis.position += 1;\n\t\treturn v;\n\n\t},\n\n\t/**\n\t * Read 32 bit float value.\n\t *\n\t * @method readFloat\n\t * @param {DataView} data Dataview to read data from.\n\t * @return {Number} Data read from the dataview.\n\t */\n\treadFloat: function ( data ) {\n\n\t\ttry {\n\n\t\t\tvar v = data.getFloat32( this.position, true );\n\t\t\tthis.position += 4;\n\t\t\treturn v;\n\n\t\t}\tcatch ( e ) {\n\n\t\t\tthis.debugMessage( e + ' ' + this.position + ' ' + data.byteLength );\n\n\t\t}\n\n\t},\n\n\t/**\n\t * Read 32 bit signed integer value.\n\t *\n\t * @method readInt\n\t * @param {DataView} data Dataview to read data from.\n\t * @return {Number} Data read from the dataview.\n\t */\n\treadInt: function ( data ) {\n\n\t\tvar v = data.getInt32( this.position, true );\n\t\tthis.position += 4;\n\t\treturn v;\n\n\t},\n\n\t/**\n\t * Read 16 bit signed integer value.\n\t *\n\t * @method readShort\n\t * @param {DataView} data Dataview to read data from.\n\t * @return {Number} Data read from the dataview.\n\t */\n\treadShort: function ( data ) {\n\n\t\tvar v = data.getInt16( this.position, true );\n\t\tthis.position += 2;\n\t\treturn v;\n\n\t},\n\n\t/**\n\t * Read 64 bit unsigned integer value.\n\t *\n\t * @method readDWord\n\t * @param {DataView} data Dataview to read data from.\n\t * @return {Number} Data read from the dataview.\n\t */\n\treadDWord: function ( data ) {\n\n\t\tvar v = data.getUint32( this.position, true );\n\t\tthis.position += 4;\n\t\treturn v;\n\n\t},\n\n\t/**\n\t * Read 32 bit unsigned integer value.\n\t *\n\t * @method readWord\n\t * @param {DataView} data Dataview to read data from.\n\t * @return {Number} Data read from the dataview.\n\t */\n\treadWord: function ( data ) {\n\n\t\tvar v = data.getUint16( this.position, true );\n\t\tthis.position += 2;\n\t\treturn v;\n\n\t},\n\n\t/**\n\t * Read string value.\n\t *\n\t * @method readString\n\t * @param {DataView} data Dataview to read data from.\n\t * @param {Number} maxLength Max size of the string to be read.\n\t * @return {String} Data read from the dataview.\n\t */\n\treadString: function ( data, maxLength ) {\n\n\t\tvar s = '';\n\n\t\tfor ( var i = 0; i < maxLength; i ++ ) {\n\n\t\t\tvar c = this.readByte( data );\n\t\t\tif ( ! c ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\ts += String.fromCharCode( c );\n\n\t\t}\n\n\t\treturn s;\n\n\t},\n\n\t/**\n\t * Print debug message to the console.\n\t *\n\t * Is controlled by a flag to show or hide debug messages.\n\t *\n\t * @method debugMessage\n\t * @param {Object} message Debug message to print to the console.\n\t */\n\tdebugMessage: function ( message ) {\n\n\t\tif ( this.debug ) {\n\n\t\t\tconsole.log( message );\n\n\t\t}\n\n\t}\n\n} );\n\n// var NULL_CHUNK = 0x0000;\nvar M3DMAGIC = 0x4D4D;\n// var SMAGIC = 0x2D2D;\n// var LMAGIC = 0x2D3D;\nvar MLIBMAGIC = 0x3DAA;\n// var MATMAGIC = 0x3DFF;\nvar CMAGIC = 0xC23D;\nvar M3D_VERSION = 0x0002;\n// var M3D_KFVERSION = 0x0005;\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\n// var INT_PERCENTAGE = 0x0030;\n// var FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3D3D;\nvar MESH_VERSION = 0x3D3E;\nvar MASTER_SCALE = 0x0100;\n// var LO_SHADOW_BIAS = 0x1400;\n// var HI_SHADOW_BIAS = 0x1410;\n// var SHADOW_MAP_SIZE = 0x1420;\n// var SHADOW_SAMPLES = 0x1430;\n// var SHADOW_RANGE = 0x1440;\n// var SHADOW_FILTER = 0x1450;\n// var RAY_BIAS = 0x1460;\n// var O_CONSTS = 0x1500;\n// var AMBIENT_LIGHT = 0x2100;\n// var BIT_MAP = 0x1100;\n// var SOLID_BGND = 0x1200;\n// var V_GRADIENT = 0x1300;\n// var USE_BIT_MAP = 0x1101;\n// var USE_SOLID_BGND = 0x1201;\n// var USE_V_GRADIENT = 0x1301;\n// var FOG = 0x2200;\n// var FOG_BGND = 0x2210;\n// var LAYER_FOG = 0x2302;\n// var DISTANCE_CUE = 0x2300;\n// var DCUE_BGND = 0x2310;\n// var USE_FOG = 0x2201;\n// var USE_LAYER_FOG = 0x2303;\n// var USE_DISTANCE_CUE = 0x2301;\nvar MAT_ENTRY = 0xAFFF;\nvar MAT_NAME = 0xA000;\nvar MAT_AMBIENT = 0xA010;\nvar MAT_DIFFUSE = 0xA020;\nvar MAT_SPECULAR = 0xA030;\nvar MAT_SHININESS = 0xA040;\n// var MAT_SHIN2PCT = 0xA041;\nvar MAT_TRANSPARENCY = 0xA050;\n// var MAT_XPFALL = 0xA052;\n// var MAT_USE_XPFALL = 0xA240;\n// var MAT_REFBLUR = 0xA053;\n// var MAT_SHADING = 0xA100;\n// var MAT_USE_REFBLUR = 0xA250;\n// var MAT_SELF_ILLUM = 0xA084;\nvar MAT_TWO_SIDE = 0xA081;\n// var MAT_DECAL = 0xA082;\nvar MAT_ADDITIVE = 0xA083;\nvar MAT_WIRE = 0xA085;\n// var MAT_FACEMAP = 0xA088;\n// var MAT_TRANSFALLOFF_IN = 0xA08A;\n// var MAT_PHONGSOFT = 0xA08C;\n// var MAT_WIREABS = 0xA08E;\nvar MAT_WIRE_SIZE = 0xA087;\nvar MAT_TEXMAP = 0xA200;\n// var MAT_SXP_TEXT_DATA = 0xA320;\n// var MAT_TEXMASK = 0xA33E;\n// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// var MAT_TEX2MAP = 0xA33A;\n// var MAT_SXP_TEXT2_DATA = 0xA321;\n// var MAT_TEX2MASK = 0xA340;\n// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\nvar MAT_OPACMAP = 0xA210;\n// var MAT_SXP_OPAC_DATA = 0xA322;\n// var MAT_OPACMASK = 0xA342;\n// var MAT_SXP_OPACMASK_DATA = 0xA32E;\nvar MAT_BUMPMAP = 0xA230;\n// var MAT_SXP_BUMP_DATA = 0xA324;\n// var MAT_BUMPMASK = 0xA344;\n// var MAT_SXP_BUMPMASK_DATA = 0xA330;\nvar MAT_SPECMAP = 0xA204;\n// var MAT_SXP_SPEC_DATA = 0xA325;\n// var MAT_SPECMASK = 0xA348;\n// var MAT_SXP_SPECMASK_DATA = 0xA332;\n// var MAT_SHINMAP = 0xA33C;\n// var MAT_SXP_SHIN_DATA = 0xA326;\n// var MAT_SHINMASK = 0xA346;\n// var MAT_SXP_SHINMASK_DATA = 0xA334;\n// var MAT_SELFIMAP = 0xA33D;\n// var MAT_SXP_SELFI_DATA = 0xA328;\n// var MAT_SELFIMASK = 0xA34A;\n// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n// var MAT_REFLMAP = 0xA220;\n// var MAT_REFLMASK = 0xA34C;\n// var MAT_SXP_REFLMASK_DATA = 0xA338;\n// var MAT_ACUBIC = 0xA310;\nvar MAT_MAPNAME = 0xA300;\n// var MAT_MAP_TILING = 0xA351;\n// var MAT_MAP_TEXBLUR = 0xA353;\nvar MAT_MAP_USCALE = 0xA354;\nvar MAT_MAP_VSCALE = 0xA356;\nvar MAT_MAP_UOFFSET = 0xA358;\nvar MAT_MAP_VOFFSET = 0xA35A;\n// var MAT_MAP_ANG = 0xA35C;\n// var MAT_MAP_COL1 = 0xA360;\n// var MAT_MAP_COL2 = 0xA362;\n// var MAT_MAP_RCOL = 0xA364;\n// var MAT_MAP_GCOL = 0xA366;\n// var MAT_MAP_BCOL = 0xA368;\nvar NAMED_OBJECT = 0x4000;\n// var N_DIRECT_LIGHT = 0x4600;\n// var DL_OFF = 0x4620;\n// var DL_OUTER_RANGE = 0x465A;\n// var DL_INNER_RANGE = 0x4659;\n// var DL_MULTIPLIER = 0x465B;\n// var DL_EXCLUDE = 0x4654;\n// var DL_ATTENUATE = 0x4625;\n// var DL_SPOTLIGHT = 0x4610;\n// var DL_SPOT_ROLL = 0x4656;\n// var DL_SHADOWED = 0x4630;\n// var DL_LOCAL_SHADOW2 = 0x4641;\n// var DL_SEE_CONE = 0x4650;\n// var DL_SPOT_RECTANGULAR = 0x4651;\n// var DL_SPOT_ASPECT = 0x4657;\n// var DL_SPOT_PROJECTOR = 0x4653;\n// var DL_SPOT_OVERSHOOT = 0x4652;\n// var DL_RAY_BIAS = 0x4658;\n// var DL_RAYSHAD = 0x4627;\n// var N_CAMERA = 0x4700;\n// var CAM_SEE_CONE = 0x4710;\n// var CAM_RANGES = 0x4720;\n// var OBJ_HIDDEN = 0x4010;\n// var OBJ_VIS_LOFTER = 0x4011;\n// var OBJ_DOESNT_CAST = 0x4012;\n// var OBJ_DONT_RECVSHADOW = 0x4017;\n// var OBJ_MATTE = 0x4013;\n// var OBJ_FAST = 0x4014;\n// var OBJ_PROCEDURAL = 0x4015;\n// var OBJ_FROZEN = 0x4016;\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110;\n// var POINT_FLAG_ARRAY = 0x4111;\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130;\n// var SMOOTH_GROUP = 0x4150;\n// var MSH_BOXMAP = 0x4190;\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160;\n// var MESH_COLOR = 0x4165;\n// var MESH_TEXTURE_INFO = 0x4170;\n// var KFDATA = 0xB000;\n// var KFHDR = 0xB00A;\n// var KFSEG = 0xB008;\n// var KFCURTIME = 0xB009;\n// var AMBIENT_NODE_TAG = 0xB001;\n// var OBJECT_NODE_TAG = 0xB002;\n// var CAMERA_NODE_TAG = 0xB003;\n// var TARGET_NODE_TAG = 0xB004;\n// var LIGHT_NODE_TAG = 0xB005;\n// var L_TARGET_NODE_TAG = 0xB006;\n// var SPOTLIGHT_NODE_TAG = 0xB007;\n// var NODE_ID = 0xB030;\n// var NODE_HDR = 0xB010;\n// var PIVOT = 0xB013;\n// var INSTANCE_NAME = 0xB011;\n// var MORPH_SMOOTH = 0xB015;\n// var BOUNDBOX = 0xB014;\n// var POS_TRACK_TAG = 0xB020;\n// var COL_TRACK_TAG = 0xB025;\n// var ROT_TRACK_TAG = 0xB021;\n// var SCL_TRACK_TAG = 0xB022;\n// var MORPH_TRACK_TAG = 0xB026;\n// var FOV_TRACK_TAG = 0xB023;\n// var ROLL_TRACK_TAG = 0xB024;\n// var HOT_TRACK_TAG = 0xB027;\n// var FALL_TRACK_TAG = 0xB028;\n// var HIDE_TRACK_TAG = 0xB029;\n// var POLY_2D = 0x5000;\n// var SHAPE_OK = 0x5010;\n// var SHAPE_NOT_OK = 0x5011;\n// var SHAPE_HOOK = 0x5020;\n// var PATH_3D = 0x6000;\n// var PATH_MATRIX = 0x6005;\n// var SHAPE_2D = 0x6010;\n// var M_SCALE = 0x6020;\n// var M_TWIST = 0x6030;\n// var M_TEETER = 0x6040;\n// var M_FIT = 0x6050;\n// var M_BEVEL = 0x6060;\n// var XZ_CURVE = 0x6070;\n// var YZ_CURVE = 0x6080;\n// var INTERPCT = 0x6090;\n// var DEFORM_LIMIT = 0x60A0;\n// var USE_CONTOUR = 0x6100;\n// var USE_TWEEN = 0x6110;\n// var USE_SCALE = 0x6120;\n// var USE_TWIST = 0x6130;\n// var USE_TEETER = 0x6140;\n// var USE_FIT = 0x6150;\n// var USE_BEVEL = 0x6160;\n// var DEFAULT_VIEW = 0x3000;\n// var VIEW_TOP = 0x3010;\n// var VIEW_BOTTOM = 0x3020;\n// var VIEW_LEFT = 0x3030;\n// var VIEW_RIGHT = 0x3040;\n// var VIEW_FRONT = 0x3050;\n// var VIEW_BACK = 0x3060;\n// var VIEW_USER = 0x3070;\n// var VIEW_CAMERA = 0x3080;\n// var VIEW_WINDOW = 0x3090;\n// var VIEWPORT_LAYOUT_OLD = 0x7000;\n// var VIEWPORT_DATA_OLD = 0x7010;\n// var VIEWPORT_LAYOUT = 0x7001;\n// var VIEWPORT_DATA = 0x7011;\n// var VIEWPORT_DATA_3 = 0x7012;\n// var VIEWPORT_SIZE = 0x7020;\n// var NETWORK_VIEW = 0x7030;\n\nexport { TDSLoader };\n"]},"metadata":{},"sourceType":"module"}