{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-duck.stp\");\n\nclass Render extends React.Component {\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    this.mount.appendChild(renderer.domElement);\n\n    function make(geometry, doAnimate) {\n      var material = new THREE.MeshNormalMaterial();\n      mesh = new THREE.Mesh(geometry, material);\n      var boundingBox = new THREE.Box3().setFromObject(mesh);\n      var sizeHouse = bb.getSize();\n      var sizeObject = boundingBox.getSize();\n      var ratio = sizeObject.divide(sizeHouse);\n      var maxRatio = Math.max(ratio.x, ratio.y, ratio.z);\n      var invertRatio = 1 / maxRatio;\n      mesh.scale.set(invertRatio, invertRatio, invertRatio);\n      mesh.position.set(0, 0.25, 0);\n      mesh.setRotationFromAxisAngle(vector, Math.PI / 2);\n      scene.add(mesh);\n\n      if (doAnimate) {\n        animate();\n      }\n    }\n\n    var loader = new STLLoader();\n    var geometry = loader.load(RubberDuck);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","ReactDOM","THREE","STLLoader","RubberDuck","require","Render","Component","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","make","geometry","doAnimate","material","MeshNormalMaterial","mesh","Mesh","boundingBox","Box3","setFromObject","sizeHouse","bb","getSize","sizeObject","ratio","divide","maxRatio","Math","max","x","y","z","invertRatio","scale","set","position","setRotationFromAxisAngle","vector","PI","add","animate","loader","load","MeshBasicMaterial","color","requestAnimationFrame","rotation","render","ref"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-duck.stp\")\n\nclass Render extends React.Component {\n\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    this.mount.appendChild( renderer.domElement );\n\n    \n\n    function make(geometry, doAnimate) {\n        var material = new THREE.MeshNormalMaterial();\n        mesh = new THREE.Mesh(geometry, material);\n        var boundingBox = new THREE.Box3().setFromObject(mesh);\n        var sizeHouse = bb.getSize();\n        var sizeObject = boundingBox.getSize();\n        var ratio = sizeObject.divide(sizeHouse);\n        var maxRatio = Math.max(ratio.x, ratio.y, ratio.z);\n        var invertRatio = 1 / maxRatio;\n        mesh.scale.set(invertRatio, invertRatio, invertRatio);\n        mesh.position.set(0, 0.25, 0);\n        mesh.setRotationFromAxisAngle(vector, Math.PI/2);\n        scene.add(mesh);\n        \n        if (doAnimate) {\n            animate();\n        }\n    }\n\n    var loader = new STLLoader();\n    var geometry = loader.load(RubberDuck, );\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var mesh = new THREE.Mesh( geometry, material );\n    scene.add(mesh);\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame( animate );\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  }\n\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nexport default Render"]},"metadata":{},"sourceType":"module"}