{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\nimport RubberDuck from './../../assets/cad-rubber-duck.stl';\n\nclass Render extends React.Component {\n  componentWillUnmount() {\n    this.mesh = null;\n    this.renderer = null;\n    this.scene = null;\n    this.camera = null;\n    this.controls = null;\n  }\n\n  componentDidMount() {\n    var container = document.createElement('div');\n    document.body.appendChild(container);\n    var camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 15);\n    camera.position.set(3, 0.15, 3);\n    var cameraTarget = new THREE.Vector3(0, -0.25, 0);\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x72645b);\n    scene.fog = new THREE.Fog(0x72645b, 2, 15);\n    var plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(40, 40), new THREE.MeshPhongMaterial({\n      color: 0x999999,\n      specular: 0x101010\n    }));\n    plane.rotation.x = -Math.PI / 2;\n    plane.position.y = -0.5;\n    scene.add(plane);\n    plane.receiveShadow = true;\n    var loader = new STLLoader();\n    loader.load(RubberDuck, function (geometry) {\n      var material = new THREE.MeshPhongMaterial({\n        color: 0x000000,\n        specular: 0x111111,\n        shininess: 200\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, -0.25, 0.6);\n      mesh.rotation.set(0, -Math.PI / 2, 0);\n      mesh.scale.set(0.5, 0.5, 0.5);\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      scene.add(mesh);\n    });\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.shadowMap.enabled = true;\n    container.appendChild(renderer.domElement);\n    scene.add(new THREE.HemisphereLight(0x443333, 0x111122));\n    var timer = Date.now() * 0.0005;\n    camera.position.x = Math.cos(timer) * 3;\n    camera.position.z = Math.sin(timer) * 3;\n    camera.lookAt(cameraTarget);\n    renderer.render(scene, camera);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","ReactDOM","THREE","STLLoader","RubberDuck","Render","Component","componentWillUnmount","mesh","renderer","scene","camera","controls","componentDidMount","container","document","createElement","body","appendChild","PerspectiveCamera","window","innerWidth","innerHeight","position","set","cameraTarget","Vector3","Scene","background","Color","fog","Fog","plane","Mesh","PlaneBufferGeometry","MeshPhongMaterial","color","specular","rotation","x","Math","PI","y","add","receiveShadow","loader","load","geometry","material","shininess","scale","castShadow","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","shadowMap","enabled","domElement","HemisphereLight","timer","Date","now","cos","z","sin","lookAt","render","ref","mount"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\nimport RubberDuck from './../../assets/cad-rubber-duck.stl';\n\nclass Render extends React.Component {\n\n    componentWillUnmount() {\n        this.mesh = null;\n        this.renderer = null;\n        this.scene = null;\n        this.camera = null;\n        this.controls = null;\n    }\n\n    componentDidMount() {\n        var container = document.createElement( 'div' );\n        document.body.appendChild( container );\n        var camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 15 );\n        camera.position.set( 3, 0.15, 3 );\n        var cameraTarget = new THREE.Vector3( 0, - 0.25, 0 );\n\n        var scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0x72645b );\n        scene.fog = new THREE.Fog( 0x72645b, 2, 15 );\n\n        var plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry( 40, 40 ),\n            new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )\n        );\n        plane.rotation.x = - Math.PI / 2;\n        plane.position.y = - 0.5;\n        scene.add(plane);\n        plane.receiveShadow = true;\n\n        var loader = new STLLoader();\n        loader.load(RubberDuck, function (geometry) {\n            var material = new THREE.MeshPhongMaterial( { color: 0x000000, specular: 0x111111, shininess: 200 } );\n            var mesh = new THREE.Mesh( geometry, material );\n            mesh.position.set( 0, - 0.25, 0.6 );\n            mesh.rotation.set( 0, - Math.PI / 2, 0 );\n            mesh.scale.set( 0.5, 0.5, 0.5 );\n            mesh.castShadow = true;\n            mesh.receiveShadow = true;\n            scene.add( mesh );\n        });\n\n        var renderer = new THREE.WebGLRenderer( { antialias: true } );\n\t\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\t\trenderer.outputEncoding = THREE.sRGBEncoding;\n\t\t\t\trenderer.shadowMap.enabled = true;\n\t\t\t\tcontainer.appendChild( renderer.domElement );\n        scene.add( new THREE.HemisphereLight( 0x443333, 0x111122 ) );\n\n        var timer = Date.now()*0.0005;\n        camera.position.x = Math.cos( timer ) * 3;\n\t\t\t\tcamera.position.z = Math.sin( timer ) * 3;\n\t\t\t\tcamera.lookAt(cameraTarget);\n\t\t\t\trenderer.render(scene, camera);\n\n  }\n\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nexport default Render\n"]},"metadata":{},"sourceType":"module"}