{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-duck.stp\");\n\nclass Render extends React.Component {\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight); // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n\n    this.mount.appendChild(renderer.domElement);\n    var loader = new STLLoader();\n    var geometry = loader.load(\"./../../assets/cad-duck.stp\");\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","ReactDOM","THREE","STLLoader","RubberDuck","require","Render","Component","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","loader","geometry","load","material","MeshBasicMaterial","color","mesh","Mesh","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","ref"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAQC,SAAR,QAAwB,sCAAxB;;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAAC,6BAAD,CAA1B;;AAEA,MAAMC,MAAN,SAAqBN,KAAK,CAACO,SAA3B,CAAqC;AAEnCC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,KAAK,GAAG,IAAIP,KAAK,CAACQ,KAAV,EAAZ;AACA,QAAIC,MAAM,GAAG,IAAIT,KAAK,CAACU,iBAAV,CAA6B,EAA7B,EAAiCC,MAAM,CAACC,UAAP,GAAkBD,MAAM,CAACE,WAA1D,EAAuE,GAAvE,EAA4E,IAA5E,CAAb;AACA,QAAIC,QAAQ,GAAG,IAAId,KAAK,CAACe,aAAV,EAAf;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBL,MAAM,CAACC,UAAzB,EAAqCD,MAAM,CAACE,WAA5C,EAJkB,CAKlB;AACA;;AACA,SAAKI,KAAL,CAAWC,WAAX,CAAwBJ,QAAQ,CAACK,UAAjC;AAEA,QAAIC,MAAM,GAAG,IAAInB,SAAJ,EAAb;AACA,QAAIoB,QAAQ,GAAGD,MAAM,CAACE,IAAP,CAAY,6BAAZ,CAAf;AACA,QAAIC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,iBAAV,CAA6B;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA7B,CAAf;AACA,QAAIC,IAAI,GAAG,IAAI1B,KAAK,CAAC2B,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAX;AACAhB,IAAAA,KAAK,CAACqB,GAAN,CAAUF,IAAV;AACAjB,IAAAA,MAAM,CAACoB,QAAP,CAAgBC,CAAhB,GAAoB,CAApB;;AACA,QAAIC,OAAO,GAAG,YAAY;AACxBC,MAAAA,qBAAqB,CAAED,OAAF,CAArB;AACAL,MAAAA,IAAI,CAACO,QAAL,CAAcC,CAAd,IAAmB,IAAnB;AACAR,MAAAA,IAAI,CAACO,QAAL,CAAcE,CAAd,IAAmB,IAAnB;AACArB,MAAAA,QAAQ,CAACsB,MAAT,CAAiB7B,KAAjB,EAAwBE,MAAxB;AACD,KALD;;AAMAsB,IAAAA,OAAO;AACR;;AAEDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,GAAG,EAAEC,GAAG,IAAK,KAAKpB,KAAL,GAAaoB,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD;;AA9BkC;;AAgCrC,eAAejC,MAAf","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-duck.stp\")\n\nclass Render extends React.Component {\n\n  componentDidMount() {\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    // document.body.appendChild( renderer.domElement );\n    // use ref as a mount point of the Three.js scene instead of the document.body\n    this.mount.appendChild( renderer.domElement );\n\n    var loader = new STLLoader();\n    var geometry = loader.load(\"./../../assets/cad-duck.stp\");\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var mesh = new THREE.Mesh( geometry, material );\n    scene.add(mesh);\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame( animate );\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  }\n\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nexport default Render"]},"metadata":{},"sourceType":"module"}