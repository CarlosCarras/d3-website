{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-duck.stp\");\n\nclass Render extends React.Component {\n  componentDidMount() {\n    var container = document.createElement('div');\n    document.body.appendChild(container);\n    var camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 15);\n    camera.position.set(3, 0.15, 3);\n    cameraTarget = new THREE.Vector3(0, -0.25, 0);\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x72645b);\n    scene.fog = new THREE.Fog(0x72645b, 2, 15); // Ground\n\n    var plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(40, 40), new THREE.MeshPhongMaterial({\n      color: 0x999999,\n      specular: 0x101010\n    }));\n    plane.rotation.x = -Math.PI / 2;\n    plane.position.y = -0.5;\n    scene.add(plane);\n    plane.receiveShadow = true;\n    var loader = new STLLoader();\n    loader.load('./models/stl/ascii/slotted_disk.stl', function (geometry) {\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xff5533,\n        specular: 0x111111,\n        shininess: 200\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, -0.25, 0.6);\n      mesh.rotation.set(0, -Math.PI / 2, 0);\n      mesh.scale.set(0.5, 0.5, 0.5);\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      scene.add(mesh);\n    });\n    var loader = new STLLoader();\n    var geometry = loader.load(RubberDuck);\n    var material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    });\n    var mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n    camera.position.z = 5;\n\n    var animate = function () {\n      requestAnimationFrame(animate);\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","ReactDOM","THREE","STLLoader","RubberDuck","require","Render","Component","componentDidMount","container","document","createElement","body","appendChild","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","cameraTarget","Vector3","scene","Scene","background","Color","fog","Fog","plane","Mesh","PlaneBufferGeometry","MeshPhongMaterial","color","specular","rotation","x","Math","PI","y","add","receiveShadow","loader","load","geometry","material","shininess","mesh","scale","castShadow","MeshBasicMaterial","z","animate","requestAnimationFrame","renderer","render","ref","mount"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-duck.stp\")\n\nclass Render extends React.Component {\n\n  componentDidMount() {\n        var container = document.createElement( 'div' );\n        document.body.appendChild( container );\n\n        var camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 15 );\n        camera.position.set( 3, 0.15, 3 );\n\n        cameraTarget = new THREE.Vector3( 0, - 0.25, 0 );\n\n        var scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0x72645b );\n        scene.fog = new THREE.Fog( 0x72645b, 2, 15 );\n\n\n        // Ground\n\n        var plane = new THREE.Mesh(\n          new THREE.PlaneBufferGeometry( 40, 40 ),\n          new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )\n        );\n        plane.rotation.x = - Math.PI / 2;\n        plane.position.y = - 0.5;\n        scene.add( plane );\n\n        plane.receiveShadow = true;\n        var loader = new STLLoader();\n        loader.load( './models/stl/ascii/slotted_disk.stl', function ( geometry ) {\n\n          var material = new THREE.MeshPhongMaterial( { color: 0xff5533, specular: 0x111111, shininess: 200 } );\n          var mesh = new THREE.Mesh( geometry, material );\n\n          mesh.position.set( 0, - 0.25, 0.6 );\n          mesh.rotation.set( 0, - Math.PI / 2, 0 );\n          mesh.scale.set( 0.5, 0.5, 0.5 );\n\n          mesh.castShadow = true;\n          mesh.receiveShadow = true;\n\n          scene.add( mesh );\n\n        } );\n\n    var loader = new STLLoader();\n    var geometry = loader.load(RubberDuck, );\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var mesh = new THREE.Mesh( geometry, material );\n    scene.add(mesh);\n    camera.position.z = 5;\n    var animate = function () {\n      requestAnimationFrame( animate );\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n  }\n\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nexport default Render\n"]},"metadata":{},"sourceType":"module"}