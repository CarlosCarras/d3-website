{"ast":null,"code":"var _jsxFileName = \"/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { STLLoader } from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-rubber-duck.stl\");\n\nclass Render extends React.Component {\n  componentDidMount() {\n    var container = document.createElement('div');\n    document.body.appendChild(container);\n    var camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 15);\n    camera.position.set(3, 0.15, 3);\n    var cameraTarget = new THREE.Vector3(0, -0.25, 0);\n    var scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x72645b);\n    scene.fog = new THREE.Fog(0x72645b, 2, 15);\n    var plane = new THREE.Mesh(new THREE.PlaneBufferGeometry(40, 40), new THREE.MeshPhongMaterial({\n      color: 0x999999,\n      specular: 0x101010\n    }));\n    plane.rotation.x = -Math.PI / 2;\n    plane.position.y = -0.5;\n    scene.add(plane);\n    plane.receiveShadow = true;\n    var loader = new STLLoader();\n    loader.load(RubberDuck, function (geometry) {\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xff5533,\n        specular: 0x111111,\n        shininess: 200\n      });\n      var mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(0, -0.25, 0.6);\n      mesh.rotation.set(0, -Math.PI / 2, 0);\n      mesh.scale.set(0.5, 0.5, 0.5);\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n      scene.add(mesh);\n    });\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    renderer.shadowMap.enabled = true;\n    container.appendChild(renderer.domElement);\n\n    var animate = function () {\n      var material = new THREE.MeshPhongMaterial({\n        color: 0xff5533,\n        specular: 0x111111,\n        shininess: 200\n      });\n      requestAnimationFrame(animate);\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: ref => this.mount = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Render;","map":{"version":3,"sources":["/Users/carloscarrasquillo/Documents/Documents/code/hackathon/swamphacks_2020/website/client/src/components/Render/Render.js"],"names":["React","ReactDOM","THREE","STLLoader","RubberDuck","require","Render","Component","componentDidMount","container","document","createElement","body","appendChild","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","cameraTarget","Vector3","scene","Scene","background","Color","fog","Fog","plane","Mesh","PlaneBufferGeometry","MeshPhongMaterial","color","specular","rotation","x","Math","PI","y","add","receiveShadow","loader","load","geometry","material","shininess","mesh","scale","castShadow","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","sRGBEncoding","shadowMap","enabled","domElement","animate","requestAnimationFrame","render","ref","mount"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {STLLoader} from 'three/examples/jsm/loaders/STLLoader';\n\nconst RubberDuck = require(\"./../../assets/cad-rubber-duck.stl\")\n\nclass Render extends React.Component {\n\n  componentDidMount() {\n        var container = document.createElement( 'div' );\n        document.body.appendChild( container );\n        var camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 15 );\n        camera.position.set( 3, 0.15, 3 );\n        var cameraTarget = new THREE.Vector3( 0, - 0.25, 0 );\n        var scene = new THREE.Scene();\n        scene.background = new THREE.Color( 0x72645b );\n        scene.fog = new THREE.Fog( 0x72645b, 2, 15 );\n        var plane = new THREE.Mesh(\n            new THREE.PlaneBufferGeometry( 40, 40 ),\n            new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )\n        );\n\n        plane.rotation.x = - Math.PI / 2;\n        plane.position.y = - 0.5;\n        scene.add(plane);\n        plane.receiveShadow = true;\n\n        var loader = new STLLoader();\n        loader.load(RubberDuck, function (geometry) {\n            var material = new THREE.MeshPhongMaterial( { color: 0xff5533, specular: 0x111111, shininess: 200 } );\n            var mesh = new THREE.Mesh( geometry, material );\n            mesh.position.set( 0, - 0.25, 0.6 );\n            mesh.rotation.set( 0, - Math.PI / 2, 0 );\n            mesh.scale.set( 0.5, 0.5, 0.5 );\n            mesh.castShadow = true;\n            mesh.receiveShadow = true;\n            scene.add( mesh );\n        });\n\n        var renderer = new THREE.WebGLRenderer( { antialias: true } );\n\t\t\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\t\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\t\t\t\trenderer.outputEncoding = THREE.sRGBEncoding;\n\t\t\t\trenderer.shadowMap.enabled = true;\n\t\t\t\tcontainer.appendChild( renderer.domElement );\n\n        var animate = function () {\n            var material = new THREE.MeshPhongMaterial( { color: 0xff5533, specular: 0x111111, shininess: 200 } );\n            requestAnimationFrame( animate );\n            mesh.rotation.x += 0.01;\n            mesh.rotation.y += 0.01;\n            renderer.render( scene, camera );\n        };\n        animate();\n  }\n\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nexport default Render\n"]},"metadata":{},"sourceType":"module"}